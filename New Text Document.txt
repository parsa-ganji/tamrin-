import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error

# تعداد نمونه‌ها
sample_sizes = [5, 25, 100, 1000]

# درجه‌های چندجمله‌ای
degrees = [1, 4, 16]

# مقادیر پارامترهای خط به صورت تصادفی
np.random.seed(42)
intercept = np.random.rand()
slope = np.random.rand()

# تابع خطای مقدار دلخواهی اضافه می‌شود
def add_noise(y, noise_factor=0.2):
    noise = noise_factor * np.random.randn(len(y))
    return y + noise

# مجموعه داده‌ها
datasets = {}

for size in sample_sizes:
    X = np.random.rand(size, 1)
    y = intercept + slope * X.flatten()
    y = add_noise(y)
    datasets[size] = {'X': X, 'y': y}

# آموزش مدل‌ها و رسم نمودارها
plt.figure(figsize=(15, 10))

for i, size in enumerate(sample_sizes):
    for j, degree in enumerate(degrees):
        X = datasets[size]['X']
        y = datasets[size]['y']

        # افزودن فیچرهای چندجمله‌ای
        poly = PolynomialFeatures(degree=degree)
        X_poly = poly.fit_transform(X)

        # آموزش مدل رگرسیون خطی
        model = LinearRegression()
        model.fit(X_poly, y)

        # پیش‌بینی برای ترسیم خط
        X_pred = np.linspace(0, 1, 100).reshape(-1, 1)
        X_pred_poly = poly.transform(X_pred)
        y_pred = model.predict(X_pred_poly)

        # رسم نمودار
        plt.subplot(4, 3, i * 3 + j + 1)
        plt.scatter(X, y, color='blue', label='Data')
        plt.plot(X_pred, y_pred, color='red', label=f'Degree {degree}')
        plt.title(f'Sample Size: {size}, Degree: {degree}')
        plt.legend()

# رسم نمودار دقت نهایی مدل‌ها
plt.figure(figsize=(10, 6))
for degree in degrees:
    mse_values = []

    for size in sample_sizes:
        X = datasets[size]['X']
        y = datasets[size]['y']

        poly = PolynomialFeatures(degree=degree)
        X_poly = poly.fit_transform(X)

        model = LinearRegression()
        model.fit(X_poly, y)

        y_pred = model.predict(X_poly)
        mse = mean_squared_error(y, y_pred)
        mse_values.append(mse)

    plt.plot(sample_sizes, mse_values, label=f'Degree {degree}')

plt.title('Model Accuracy vs. Sample Size')
plt.xlabel('Sample Size')
plt.ylabel('Mean Squared Error')
plt.legend()
plt.show()
